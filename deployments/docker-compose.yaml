version: "3.8"

services:
  database:
    image: postgres:17.4
    container_name: ${POSTGRES_DB}
    env_file:
      - ../configs/dc.env
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - ${DATABASE_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: ${HEALTHCHECK_RETRIES}
      start_period: ${HEALTHCHECK_START_PERIOD}
    restart: unless-stopped

  migrations:
    image: kukymbr/goose-docker:3.24.1
    env_file:
      - ../configs/dc.env
    volumes:
      - ../migrations:/migrations
    depends_on:
      - database

  redis:
    image: redis:7.4.2-alpine
    container_name: cache
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
      - ../configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped

  nginx:
    image: nginx:1.23-alpine
    ports:
      - ${NGINX_HTTP_PORT}:80
      - ${NGINX_HTTPS_PORT}:443
    restart: always
    environment:
      - NGINX_HOST=${NGINX_HOST}
    volumes:
      # - ./nginx/first_start/:/etc/nginx/templates/:ro
      - ./nginx/templates/:/etc/nginx/templates/:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro

  certbot:
    image: certbot/certbot:v2.5.0
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

  app:
    build:
      context: ../
      dockerfile: build/package/Dockerfile
    container_name: bot
    ports:
      - "${APP_PORT}:3001"
    restart: unless-stopped
    env_file:
      - ../configs/dc.env
    depends_on:
      - database
      - redis
      - nginx
      - migrations

volumes:
  db-data:
  redis-data:
